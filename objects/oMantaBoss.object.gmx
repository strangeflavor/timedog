<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMantaRay</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oLargeEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with make_bhpg_turret(0) {
    sprite_index = other.sprite_index;
    bhpg_pattern_init(3,50,220,1,90,15,-0.25,0,30,6,32,16,0,16);
    bhpg_bullet_init(oBullet,4,0,0);
    
    bullets[1] = 2;
    bullets[2] = 1;
    bullets[3] = 3;
    bullets[4] = 2;
    bullets[5] = 1;
    bullets[6] = 3;
    bullets[7] = 2;
    bullets[8] = 1;
    bullets[9] = 5;
    bullets[10] = 1;
    spin_reset_advanceBulletsIndex = true;
    
    spin_reset = 50;
    spin_reset_wait = 45;

    spin_reset_adjustStartAngle = 64; // added and then subtracted from start_angle each time spin resets
    spin_reset_spin_direction_reverse = true;
    spin_reset_adjustBullets = -1;

    //TweenFire(id, tween_spin_reset_wait, EaseLinear, TWEEN_MODE_LOOP, true, 0.0, 1, 7, 60);
}

image_scale(1);

killWhenOffscreen = false;
killWhenBelowScreen = false;

HP = 320;

pilotID[0] = make(oMerchantPilot);
pilotID[0].ship_xo = 0;
pilotID[0].ship_yo = -52;
pilotID[0].image_xscale = 1;
pilotID[0].image_yscale = -1;

state = _MOVEVERT;//_APPROACH;

setup_state_paths();
//add_state_path(_APPROACH,240);
//add_state_path(_MOVETOWARD,90);
add_state_path(_MOVECENTER,6000);

state_path_loop_position = 0;

x1 = xstart;
y1 = 80;
ao = 0;

end_MOVECENTER = false; // used to delay flying offscreen at the end of _MOVECENTER

image_angle = 90
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i=0;i&lt;16;i+=1) {
    if pilotID[i] &gt; -1 {
        if instance_exists(pilotID[i]) {
            pilotID[i].x = xprevious + pilotID[i].ship_xo;
            pilotID[i].y = y+30 + pilotID[i].ship_yo;
        }
    }
}

//image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active {

    switch state {
        case _APPROACH:
            disable_script = true;

            if current_state_age == 0 {
                TweenSimpleRotate(image_angle,90,210,EaseOutElastic);
            }

            if state_path_position &gt; 1 or state_path_loops &gt; 0 {
                if current_state_age &gt; 30 {
                    //shoot_spray(2,24,choose(2,3,3,4),sShot3);
                }
            }

            // drop mine
            if objectAge &gt; 10 and current_state_age mod 120 == 0 {
                if irandom(6) == 1 make(x,y+32,oMantaMine_defective) else make(x,y+32,oMantaMine);
                gravity = choose(.025,-.025);
                vspeed -= 2;

                repeat 8 {
                    with make(x+nrandom(8),y+80+nrandom(8),oBubble) {
                        alarm[0] = irandom(12);
                        direction = 90 + nrandom(90);
                        speed = choose(1,2,3);
                        gravity = .15;
                        friction = .1;
                        depth = other.depth - 1;
                    }
                }
            }

            if y &gt; vh - vh/3 gravity = -.025;
            if y &lt; 100 gravity = .03;
            speed = clamp(speed,-1.5,1.5);
        break;
        case _MOVETOWARD:
            disable_script = false;
            gravity = 0;

            if current_state_age == 0 {
                xVel = .1;
                if x &lt; vw/2 {
                    TweenSimpleRotate(image_angle,image_angle-12,60,EaseOutQuint);
                    x1 = vw - xstart
                } else {
                    TweenSimpleRotate(image_angle,image_angle+12,60,EaseOutQuint);
                    x1 = xstart;
                }
            }

            if xVel &lt; 3 xVel *= 1.2;
        break;
        case _MOVECENTER:
            disable_script = false;
            image_angle = approach(image_angle,90,1);
            xVel = .5;
            yVel = 1.8;

            if !end_MOVECENTER {
                if instance_number(oBullet) &lt;= 7 {
                    TweenSimpleMove(x,y,x-16,-180,60,EaseInQuint);
                    end_MOVECENTER = true;
                }
            } else {
                if current_state_age mod 7 == 0 and y &gt; 80 {
                    with make(x,y+32,oMantaMine) {
                        myOffset = other.current_state_age;
                        age *= .5;
                        type = 'messy';
                    }
                }

                if y &lt; -100 do_next_state();
            }
        break;
        case _MOVEVERT:
            disable_script = false;

            if current_state_age == 180 {
                xVel = 0;
                yVel = 0;
                gravity = 0;
                speed = 0;
                image_angle = 270;

                TweenSimpleMove(x,y,vw/2,150,60,EaseOutQuint);
            }

            if current_state_age &gt;= 210 bhpg_turret[0].active = true;

            var mine_freq = 0;
            if current_state_age &gt; 320 mine_freq = 180;
            if current_state_age &gt; 530 mine_freq = 90;

            if current_state_age &gt; 320 {
                if current_state_age mod mine_freq == 0 {
                    with make(vw/2 + choose(60,-60,100,-100),-32,oMantaMine) depth = other.depth - 1;
                }
            }

            // move
            if current_state_age &gt;= 360 and current_state_age mod 360 == 0 {
                if x &lt; vw/4 {
                    hspeed = 1;
                } else {
                    if x &gt; vw-vw/4 {
                        hspeed = -1;
                    } else {
                        hspeed = choose(1,-1);
                    }
                }

                image_angle = 270 - hspeed*8;
                TweenSimpleRotate(image_angle,270,210,EaseInCubic);
            }

            if x &lt; vw/4 or x &gt; vw-vw/4 friction = .05 else friction = .0025;
        break;
    }
}

// angle
if x == xprevious {
    //image_angle += wave(-5,5,3,0);
    //image_angle = lerp(image_angle,90,.8);
    //TweenSimpleRotate(image_angle,90,30,EaseInOutElastic);
} else {
    //if x &lt; xprevious image_angle += .25;
    //if x &gt; xprevious image_angle -= .25;
}

/*
if state != _MOVEHORI {
    ao = wave(-5,5,3,0);
    image_angle = 90 + ao;
    //x = x1 + ao*1.5;//wave(-8,8,3,0);
}
*/

// bubbls
/*
if objectAge mod 6 == 0 {
    repeat (5) {
        var xo = -other.ao*2 + nrandom(15); //lengthdir_x(32,direction-90) + nrandom(8);
        var yo = 32+lengthdir_y(32,direction-90) + nrandom(8);
        with make(x+xo,y+yo,oBubble) {
            finalScale = choose(.25,.1);
            initScale = .25;

            alarm[0] = choose(9,12,16,19);
            sprite_index = sBubble;
            direction = 270 + other.ao*2 + nrandom(12);
            speed = choose(4,5,6,7);
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
