<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sItemUI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>oButton</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buttonSize = 120;
image_speed = 0;
image_xscale = buttonSize;
image_yscale = buttonSize;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index == sItemUI {
    depth = 1; // reset depth if this item was chosen 
    item = image_index;
    if getWeaponUnlock(item) {
        sprite_index = sSoldOut;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active {
    if mouse_x &gt; x - buttonSize/2 and mouse_x &lt; x + buttonSize/2 and mouse_y &gt; y - buttonSize/2 and mouse_y &lt; y + buttonSize/2 {
        if !rollOver sfx(sndRollover);
        rollOver = true;
    } else {
        rollOver = false;
    }

    if rollOver and objectAge &gt; 10 and sprite_index != sSoldOut {
        if mouse_check_button_released(mb_left) {
            if sprite_index == sBack {
                room_goto(rLevelSelect);
            } else {
                if sprite_index == sConfirm {
                    with oShopButton if sprite_index == sConfirm kill();
                    oShopConfirm.alarm[0] = 1;

                    if image_index == 0 {
                        if gems &lt; getWeaponCost(oShopConfirm.item) {
                            oShopConfirm.cannotAfford = true;
                            oShopConfirm.alarm[0] = 120;
                        } else {
                            gems -= getWeaponCost(oShopConfirm.item);
                            setWeaponUnlock(oShopConfirm.item);
                            //oShopConfirm.alarm[0] = 1;
                        }
                    }
                } else {
                    with oShopButton depth = 1;
                    depth = -1;
                    with oShopButton if sprite_index == sConfirm kill();
                    with make(vw/2,vh-vh/6,oShopConfirm) {
                        item = other.image_index;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var color = c_white;
if rollOver color = merge_color(c_white,c_blue,objectAge*.025);

if sprite_index == sBack {
    if rollOver draw_sprite_ext(sBack,1,x,y,1,1,0,color,1) else draw_sprite_ext(sBack,0,x,y,1,1,0,c_white,1);
} else {
    if sprite_index == sConfirm {
        if !rollOver {
            if image_index == 0 color = c_lime else color = c_red;
        }
        draw_sprite_ext(sprite_index,image_index,x,y,1,1,0,color,1);
    } else {
        if sprite_index == sSoldOut {
            draw_sprite_ext(sShopButtonUI,0,x,y,2,2,0,c_gray,1);
            draw_sprite_ext(sSoldOut,image_index,x,y,2,2,0,c_white,1);
        } else {
            draw_set_halign(fa_middle);
            draw_set_valign(fa_bottom);

            draw_set_color(color);

            draw_text(x,y-64,getWeaponName(image_index));
            draw_sprite_ext(sShopButtonUI,0,x,y,2,2,0,color,1);
            draw_sprite_ext(sItemUI,image_index,x,y,2,2,0,c_white,1);

            draw_set_valign(fa_top);
            //draw_text(x,y+80,string(getWeaponCost(image_index)));
            draw_text_ext_transformed(x,y+64,string(getWeaponCost(image_index)),0,-1,2,2,0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
