<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe Control Variables
MouseX = 0;
MouseY = 0;
MouseXStart = 0;
MouseYStart = 0;

Swipe = false;
dragTime = 0;
SwipeSpeed = 0;
released = false

PD = 0;  //Point of Direction

dragging = false;
snapToWorld = 0; // after swiping the view around, the view tries to snap to this world
dx = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left) {
    dragging = true
    drag_x = mouse_x
    drag_y = mouse_y;
    dragTime = 0;
    SwipeSpeed = 0;
    //drag_y = mouse_y
}

if mouse_check_button_released(mb_left) {
    dragging = false;
    released = true;
    MouseX = mouse_x;
    MouseY = mouse_y;
}

if (dragging) {
    dragTime += 1;
    // actual dragging logic:
    view_xview[0] = view_xview[0] + drag_x - mouse_x
    //view_yview[0] = view_yview[0] + drag_y - mouse_y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Swipe Action Individualy
/*
if (device_mouse_check_button_pressed(0, mb_left))
    {
    Swipe = true;
    MouseXStart = mouse_x;
    MouseYStart = mouse_y;
    }
*/
//if (Swipe = true) {
/*
if released {
    released = false;
    MouseX = mouse_x;
    MouseY = mouse_y;
    SwipeTime++;
    PD = point_direction(MouseXStart, MouseYStart, MouseX, MouseY);
*/

if !dragging {
    //if (device_mouse_check_button_released(0, mb_left))
    if released {
        PD = point_direction(drag_x, drag_y, MouseX, drag_y);
        Swipe = false;
        SwipeSpeed = point_distance(drag_x, drag_y, MouseX, drag_y) / dragTime;

        dragTime = 0;

        if ((PD &gt; 315) and (PD &lt; 45)) //Right
        and (SwipeSpeed &gt; 4.5)
        {
         // code is executed for swiping right // 
        } else
        if ((PD &gt; 45) and (PD &lt; 135)) //Up
        and (SwipeSpeed &gt; 4.5)
        {
         // code is executed for swiping up //   
        } else
        if ((PD &gt; 135) and (PD &lt; 225)) //Left
        and (SwipeSpeed &gt; 4.5)
        {
         // code is executed for swiping left // 
        } else
        if ((PD &gt; 225) and (PD &lt; 315)) //Down
        and (SwipeSpeed &gt; 4.5)
        {
         // code is executed for swiping down //       
        }

        released = false;
    }
//}
}

view_xview[0] = max(view_xview[0],-view_wview[0]);
view_xview[0] = min(view_xview[0],view_wview[0]*(numWorlds+1));

if view_xview[0] &lt; 0 {
    PD = 180;
    SwipeSpeed = max(SwipeSpeed+2,6);
    view_xview[0] += SwipeSpeed;
} else {
    if abs(SwipeSpeed) &gt; 0.1 {
        var swipeSign = -1;
        if ((PD &gt; 135) and (PD &lt; 225)) swipeSign = 1;

        // bounce back
        if view_xview[0] &lt; 0 and swipeSign &lt; 0 {
            swipeSign *= -1;
            //SwipeSpeed *= .5;
        }

        view_xview[0] += SwipeSpeed*swipeSign;

        SwipeSpeed *= .92;
    }
}

var cx;
for (var i=0;i&lt;numWorlds;i+=1) {
    cx[i] = i*view_wview[0]+view_wview[0]/2;
}

var vx = view_xview[0]+view_wview[0]/2;
//var 
dx = cx[numWorlds-1];
if !dragging and vx - view_wview[0]/2 &gt; 0 and vx + view_wview[0]/2 &lt; numWorlds*view_wview[0] {
    for (var i=0;i&lt;numWorlds-1;i+=1) {
        if vx &gt;= cx[i] - view_wview[0]/3 and vx &lt; cx[i+1] - view_wview[0]/3 {
            dx = cx[i];
            break;
        }
    }

    view_xview[0] = dx - view_wview[0]/2;
}

x = view_xview[0] + xstart;
y = view_yview[0] + ystart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if debug {
    
    draw_set_colour(c_orange);
    draw_set_alpha(0.6);
    draw_rectangle(0, 0, 210, 75, 0);
    draw_set_alpha(1.0);
    draw_text(8,12,string(SwipeSpeed));
}
*/
if debug &gt; 0 {
    ///Draw Swipe Cursor
    draw_set_colour(c_orange);
    //draw_line(MouseXStart, MouseYStart, MouseX, MouseY);
    
    draw_set_colour(c_orange);
    draw_set_alpha(0.6);
    draw_rectangle(0, 0, 210, 75, 0);
    draw_set_alpha(1.0);
     
    //draw_set_font(fnt_Arial_B12);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
    
    draw_set_colour(c_white);
    
    draw_text(8, 12, "Swipe = " + string(Swipe));
    draw_text(8, 34, "Swipe Speed = " + string(SwipeSpeed));
    draw_text(8, 58, "Point Direction = " + string(PD));
    draw_text(8, 66, "snap to = " + string(dx));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sliderWidth = room_width - 128;
var sliderHeight = 32;
draw_set_color(c_white);
draw_rectangle(x-sliderWidth,y-sliderHeight,x+sliderWidth,y+sliderHeight,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
