<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSkullBorder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oLargeEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

value = 10;
HP = 300;
flashing = 0;

x = vw/2;
y = vh/4;

xdest = room_width/2;
ydest = room_height/8;

x1 = 128;
x2 = room_width-x1;
xVel = 2;
yVel = 7;
slowdown = 0;

attack_state = -1;
change_attack_state = 70;
next_attack_state = _ATK_BEAMS;

attack_started = false;

makeTurret(0,sprite_width/3 + 16,32);
makeTurret(1,-sprite_width/3 - 16,32);
makeTurret(2,0,sprite_height/2);

setup_state_paths();
add_state_path(_APPROACH,90);
add_state_path(_SPIRAL,240);
add_state_path(_WAIT,120);
add_state_path(_SPIRAL,240);
add_state_path(_WAIT,120);
state_path_loop_position = 1;

add_attack_state_path(_WAIT,180);
add_attack_state_path(_ATK_BEAMS,-1);

start_state_paths();

//

noiseblendsurf = 4;
noiseblenddest = 2;
noisesurf = -1;
starssurf = -1;
alarm[11] = choose(60,120,150);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///levelManager.bossDefeated = true;
levelManager.bossDefeated = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch irandom(3) {
    case 0:
        noiseblendsurf = 4;
        noiseblenddest = 2;
    break;
    case 1:
        noiseblendsurf = 2;
        noiseblenddest = 2;
    break;
    case 2:
        noiseblendsurf = 3;
        noiseblenddest = 2;
    break;
    case 3:
        noiseblendsurf = 7;
        noiseblenddest = 4;
    break;
}

alarm[11] = choose(120,150,180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active {
    switch state {
        case _BACKANDFORTH_HORI:
            if current_state_age == 15 {
                addRecoil(20);

                beam[0] = make(getTurretX(0),getTurretY(0),oBeam);
                with beam[0] {
                    xo = x - other.x;
                    yo = 0;//y + sprite_height/3;
                    owner = other.id;
                    duration = 330;
                }

                beam[1] = make(getTurretX(1),getTurretY(1),oBeam);
                with beam[1] {
                    xo = x - other.x;
                    yo = 0;//y + sprite_height/3;
                    owner = other.id;
                    duration = 330;
                }
            }
            
            if state_path_loops &gt;= 0 {
                if current_state_age &gt; 60 {
                    shoot_spray(2,12,choose(2,3,3,4));
                }
            }
        break;
        case _SPIRAL:
            if current_state_age &lt; 120 {
                with make(getTurretX(0),getTurretY(0),oBullet) {
                    depth -= 1;
                    direction = 360*sin(other.objectAge*.05);
                    speed = 5;
                    friction = .02;
                }
            } else {
                with make(getTurretX(1),getTurretY(1),oBullet) {
                    depth -= 1;
                    direction = 360*sin(other.objectAge*.05);
                    speed = 5;
                    friction = .02;
                    image_blend = c_aqua
                }
            }
        break;
    }

    /*
    if change_attack_state &gt; -1 {
        change_attack_state -= 1;
        if change_attack_state &lt; 0 {
            change_attack_state = -1;
            attack_state = next_attack_state;
        }
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(noisesurf) noisesurf = surface_create(view_wview[0], view_hview[0]);
if !surface_exists(starssurf) starssurf = surface_create(view_wview[0], view_hview[0]);


if flashing &lt; 0 {
    flashing += 1;
    if flashing == 0 {
        flashing = 12;
        image_index = irandom(16);
    }
} else {
    if flashing &gt; 0 flashing -= 1;
}


image_angle += 1;
image_index += 1;

draw_set_blend_mode_ext(5,4);

c1 = make_color_rgb(50,12,12);
c2 = make_color_rgb(70,12,18);
bg_color_rate = .1;
bg_color = merge_color(c1,c2,abs(sin(objectAge*bg_color_rate)));

if surface_exists(noisesurf) {
    surface_set_target(noisesurf);

    if frac(objectAge/60) == 0 {
        draw_sprite_ext(sFilmGrain,irandom(3),vw/2+irandom(128)-64,vh/2+irandom(128)-64,choose(-1,1),choose(-1,1),1,c_white,.25);
    } else {
        // fade
        //draw_set_alpha(.0001);
        draw_set_alpha(.1);
        //draw_clear_alpha(c_white,.1)
        //var c_fade = merge_color(bg_color,c_black,abs(sin(objectAge*.01)));
        var c_fade = c_black;
        draw_rectangle_colour(0,0,vw,vh,c_fade,c_fade,c_fade,c_fade,false);
        draw_set_alpha(1);

        //makeBlendTester();
        draw_set_blend_mode_ext(noiseblendsurf,noiseblenddest);
        //draw_circle_colour(vw/2+nrandom(64),vh/2+nrandom(64),240,c_black,c_white,false);
        //draw_sprite_ext(sEnergyOrb,0,vw/2+nrandom(64),vh/4+nrandom(64),3,3,image_angle,c_white,1); // ? spotlight ?
        draw_sprite_ext(sGradientCircle,0,x+nrandom(64),y+nrandom(64),3,3,image_angle,bg_color,1); // ? spotlight ?

        /*
            if irandom(400) == 1 {
                draw_clear_alpha(c2,.01);
                draw_set_alpha(1);
                draw_rectangle_color(0,0,vw,vh,c_black,c_black,c_black,c_black,false);
            }
        */

    }    
    surface_reset_target();

    var shake = 0;
    draw_surface_stretched(noisesurf, shake, shake, display_get_gui_width(), display_get_gui_height());
}

if flashing &gt;= 0 {
    draw_sprite_ext(sSkullBorder,0,x+nrandom(16),y+nrandom(16),2,2,0,c_white,1); // ? spotlight ?
}

/*
if surface_exists(starssurf) and flashing &gt;= 0 {
    surface_set_target(starssurf);

    if frac(objectAge/60) == 0 {
        draw_sprite_ext(sFilmGrain,irandom(3),vw/2+irandom(128)-64,vh/2+irandom(128)-64,choose(-1,1),choose(-1,1),1,c_white,.25);
    } else {
        // fade
        //draw_set_alpha(.0001);
        //draw_set_alpha(.1);
        //draw_clear_alpha(c_white,.1)
        //var c_fade = merge_color(bg_color,c_black,abs(sin(objectAge*.01)));
        var c_fade = c_black;
        //draw_rectangle_colour(0,0,vw,vh,c_fade,c_fade,c_fade,c_fade,false);
        draw_set_alpha(1);

        //makeBlendTester();
        //draw_set_blend_mode_ext(2,2);
        draw_set_blend_mode(bm_normal);
        draw_sprite_ext(sSkullBorder,0,vw/2+nrandom(16),vh/4+nrandom(16),2,2,0,c_white,1); // ? spotlight ?

        if irandom(400) == 1 {
            draw_clear_alpha(c2,.01);
            draw_set_alpha(1);
            draw_rectangle_color(0,0,vw,vh,c_black,c_black,c_black,c_black,false);
        }        
    }
    surface_reset_target();

    draw_surface_stretched(starssurf, 0, 0, display_get_gui_width(), display_get_gui_height());
}
*/
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
