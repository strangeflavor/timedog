<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sShot0</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>shot_pattern</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rounds = 1; // how many to fire
rate = 8; // how frequently to fire
fired = 0; // how many fired so far
shot_speed = 6;
shot_speed_delta = 0; // change in speed per shot
shot_xpos_jitter = 0;
shot_direction = 270;
shot_direction_jitter = 0;
shot_direction_delta = 20;

objectAge = -1;
fireAge = 0; // when to fire

creatorID = noone;
followCreator = false;

level = 1; // higher level = more difficult pattern
aim = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if objectAge == fireAge {
    var aimAmount;
    if aim == -1 or !instance_exists(oShip) {
        aimAmount = 0;
    } else {
        aimAmount = point_direction(x,y,oShip.x,oShip.y);
        aimAmount = angle_difference(shot_direction,aimAmount);
        aimAmount = sign(aimAmount)*(-aim);
    }

    switch fired {
        case 0:
            // middle
            var bID = make(x+irandom(shot_xpos_jitter)+shot_xpos_jitter/2,y,oBullet);
            bID.sprite_index = sprite_index;
            bID.depth -= 1;
            bID.direction = shot_direction+aimAmount;
            bID.speed = shot_speed;
        
            // left
            var bID = make(x+irandom(shot_xpos_jitter)+shot_xpos_jitter/2,y,oBullet);
            bID.sprite_index = sprite_index;
            bID.depth -= 1;
            bID.direction = shot_direction-shot_direction_delta+aimAmount;
            bID.speed = shot_speed;
        
            // right
            var bID = make(x+irandom(shot_xpos_jitter)+shot_xpos_jitter/2,y,oBullet);
            bID.sprite_index = sprite_index;
            bID.depth -= 1;
            bID.direction = shot_direction+shot_direction_delta+aimAmount;
            bID.speed = shot_speed;
        break;
        case 1:
            // left alt
            var bID = make(x+irandom(shot_xpos_jitter)+shot_xpos_jitter/2,y,oBullet);
            bID.sprite_index = sprite_index;
            bID.depth -= 1;
            bID.direction = shot_direction-shot_direction_delta/2+aimAmount;
            bID.speed = shot_speed;

            // right alt
            var bID = make(x+irandom(shot_xpos_jitter)+shot_xpos_jitter/2,y,oBullet);
            bID.sprite_index = sprite_index;
            bID.depth -= 1;
            bID.direction = shot_direction+shot_direction_delta/2+aimAmount;
            bID.speed = shot_speed;
        break;
    }

    fired += 1;
    if fired &gt; level kill();

    shot_speed += shot_speed_delta;
    fireAge += rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
