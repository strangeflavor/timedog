<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objectAge = 0;
HP = 1;
active = false;
invul = false;
invulTime = -1;
dangerous = true;
explosionType = _SMALL;
value = -1;
recoil = 0;
aimAtPlayer = false;
fireAge = -1;
fired = 0; // # of shots fired
image_xscale = 2*scale
image_yscale = 2*scale

explosion_blend = choose(c_yellow,c_red,c_blue,c_white);

///////////////////////////
// behavior/phase stuff
///////////////////////////

state = _NONE;
use_state_path = false;

cx = -1; // center point for orbital movement
cy = -1; // to do: change this name lol

cx_offset = 0; // offset to add to x/y to get the 'true' center point of the enemy
cy_offset = 0; // used to correct for cases where 

yStop = vh*2

killWhenBelowScreen = true;
killWhenOffscreen = true;
offScreenTimer = 36;

phaseCreateVars();

path = -1;
path_endtime = -1;
path_endaction = path_action_continue;
killWhenPathComplete = false;

waitTime = -1;

Angle = 0; // Current orbital angle
speed_sign = 1;

///////////////////////////
// formation stuff
///////////////////////////

amLeader = false;
hasLeader = false;

formationID = -1;
holdTimelineID = -1;

space = _NONE;
formationStartX = xstart;
formationStartY = ystart;

spawn_at_player_x = false;
spawn_at_player_y = false;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// gotta check this even if inactive bc timeline needs to advance
if holdTimelineID &gt; -1 {
    var holdFormationRemaining = removeEnemyFromFormationTracker(holdTimelineID);
    if holdFormationRemaining &lt;= 0 { 
        levelManager.timeline_running = true;
    }
}

if active {
    if y &lt; vh + 32*scale {
        sfx(sndDefeatEnemy);

        switch explosionType {
            case _SMALL:
                with make(oExplo) image_blend = other.explosion_blend;
            break;
            case _MED:
                with make(oExplo) image_blend = other.explosion_blend;
            break;
            case _LARGE:
                with make(x+cx_offset,y+cy_offset,oExploChain) {
                    size = 5;
                    rate = 5;
                    xrandom = 150;
                    yrandom = 40;
                    explosion = oLargeExplo;
                    explosion_scale = 3;
                    explosion_sprite_index = sLargeExplosion;
                    explosion_image_blend = -1;//other.explosion_blend;
                }
                repeat 3 make(x+cx_offset,y+cy_offset,Smoke);
            break;
        }

        if formationID &gt; -1 {
            if removeEnemyFromFormationTracker(formationID) &lt;= 0 value *= -1;
        }

        if value &gt; 0 {
            if value == 1 {
                make(x,y,oPickup);
            } else {
                repeat value {
                    make(x+irandom(48)-24,y+irandom(48)-24,oPickup);
                }
            }
        }
    }
}

with shot_pattern {
    if creatorID == other.id kill();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resume motion
friction = 0;
speed = pSpeed;
direction = pDirection;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///active = true;
if waitTime &lt; 0 {
    active = true;
    if spawn_at_player_x {
        x = oShip.x;
    }
    if spawn_at_player_y y = oShip.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active and use_state_path {
    update_state_path();
    do_state(state);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active {
    //////////////////////////
    // misc updates
    //////////////////////////

    objectAge += 1;
    //if HP &lt; 0 kill(self);
    if killWhenBelowScreen {
       if y &gt; (vh + 64*scale) {
        value = 0;
        kill(self);
       }
    }

    if killWhenOffscreen {
        if offscreen() {
            if offScreenTimer &lt;= 0 {
                value = 0;
                kill(self);
            }
            offScreenTimer -= 1;
        } else {
            offScreenTimer = 36;
        }
    }

    //if invulTime &gt; 0 and invul {
    if invul and invulTime &gt; -1 {
        invulTime -= 1;
        if invulTime &lt; 0 invul = false;
    }

    if recoil &gt; 0 {
        recoil -= 4;
        y+=4;
    }

    //////////////////////////
    // handle paths
    //////////////////////////

    if path_index == -1 {
        if path &gt; -1 {
            //trace('enemy starting path at spd '+string(path_speed));
            path_start(path,path_speed,path_endaction,false);
        }
    } else {
        if (path_endtime &gt; -1 and objectAge == path_endtime) {
            path = -1;
            path_end();
            if killWhenPathComplete kill();
        }
    }

    //////////////////////////
    // run phase
    //////////////////////////

    enemy_RunPhase(currentPhase);

} else {
    if waitTime &gt;= 0 {
        waitTime -= 1;
    } else {
        if alarm[0] == -1 {
            alarm[0] = 1;
        }
        //active = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active and !invul and y &gt; 0 {
    with other {
        HP -= 1;
        if HP &lt;= 0 {
            kill();
            sfx(sndDamageEnemy)
        }
    }
    HP -= other.damage;
    if HP &lt; 0 kill();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
