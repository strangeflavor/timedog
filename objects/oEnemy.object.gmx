<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objectAge = 0;
HP = 1;
active = false;
invul = false;
invulTime = -1;
dangerous = true;
explosionType = sLargeExplosion;
value = -1;
recoil = 0;
fired = 0; // # of shots fired
image_xscale = 2*scale
image_yscale = 2*scale

///////////////////////////
// behavior/phase stuff
///////////////////////////

state = _NONE;
use_state_path = false;

yStop = vh*2

killWhenBelowScreen = true;
killWhenOffscreen = true;
offScreenTimer = 36;

phaseCreateVars();

path = -1;
path_endtime = -1;
path_endaction = path_action_continue;
killWhenPathComplete = false;

waitTime = -1;

///////////////////////////
// formation stuff
///////////////////////////

amLeader = false;
hasLeader = false;

formationID = -1;

space = _NONE;
formationStartX = xstart;
formationStartY = ystart;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active {
    if y &lt; vh + 32*scale {
        sfx(sndDefeatEnemy);

        fxId = make(oFX);
    
        fxId.sprite_index = explosionType;
        fxId.image_xscale = image_xscale/2;
        fxId.image_yscale = image_yscale/2;

        if formationID &gt; -1 {
            if removeEnemyFromFormationTracker(formationID) &lt;= 0 value *= -1;
        }

        if value &gt; 0 {
            repeat value {
                instance_create(x+irandom(32)-16,y+irandom(32)-16,oPickup);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resume motion
friction = 0;
speed = pSpeed;
direction = pDirection;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///active = true;
if waitTime &lt; 0 {
    active = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active and use_state_path {
    update_state_path();
    do_state(state);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active {
    //////////////////////////
    // misc updates
    //////////////////////////

    objectAge += 1;
    if HP &lt; 0 kill(self);
    if killWhenBelowScreen {
       if y &gt; (vh + 64*scale) {
        value = 0;
        kill(self);
       }
    }

    if killWhenOffscreen {
        if offscreen() {
            if offScreenTimer &lt;= 0 {
                value = 0;
                kill(self);
            }
            offScreenTimer -= 1;
        } else {
            offScreenTimer = 36;
        }
    }

    if invulTime &gt; 0 and invul {
        invulTime -= 1;
        if invulTime == 0 invul = false;
    }

    if recoil &gt; 0 {
        recoil -= 4;
        y+=4;
    }

    //////////////////////////
    // handle paths
    //////////////////////////

    if path_index == -1 {
        if path &gt; -1 {
            //trace('enemy starting path at spd '+string(path_speed));
            path_start(path,path_speed,path_endaction,false);
        }
    } else {
        if (path_endtime &gt; -1 and objectAge == path_endtime) {
            path = -1;
            path_end();
            if killWhenPathComplete kill(self);
        }
    }

    //////////////////////////
    // run phase
    //////////////////////////

    enemy_RunPhase(currentPhase);

} else {
    if waitTime &gt; 0 {
        waitTime -= 1;
    } else {
        active = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active and !invul {
    HP -= other.damage;
    with other {
        HP -= 1;
        if HP &lt;= 0 {
            instance_destroy();
            sfx(sndDamageEnemy)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
