<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMerchant</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_drone</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Steering Behaviour Support


//Non-Steering behaviour stuff
//my_color = c_red;

image_scale(1);


//Steering behaviour stuff
position = vect2(x,y); // will be used to update xy
velocity = vect2(0,0);
steering = vect2(0,0); // desired velocity

max_speed = 4.5;
max_force = 0.6; // How fast it turns

//Only needed if object MUST not overlap specified solid object
solid_obj = oMeteor;
is_colliding = false;
collision_counter = 60; //Minimum number of frames to run alternate steering behaviours upon collision
collision_timer = 0; //Actual timer variable
flee_obj = noone; //specific instance to move away from
flee_x = 0;
flee_y = 0;

//Chase Demo specific stuff
target_obj = noone;
target_range = 128;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Steering Behaviour Usage

// reset steering (needed before using steering behaviours)
steering = vect2(0,0);


//## Steering Behaviours go below here ##//

// Add like this:
//(First one doesn't need the vect_add, but it doesn't break if you leave it in)
//steering = vect_add(steering, sb_#behaviour#(argument,stuff,blah));

//The last argument for all steering behaviours is the weighting.
//You can use any numerical values you like, but they are proportional.
//ie., two behaviours with weights of "5" and "10" will act the same as
//the same two behaviours with weights of "30" and "60".
//The order of the steering behaviours doesn't matter. (at least it shouldn't)

//BE SOLID AWARE!!
//THEORY:   1)Run normal steering behaviours.
//          2)If result causes a collision, set flee point to colliding objects XY, start counter
//          3)Run different subset of steering behaviours until counter reaches specified value

if((is_colliding == false) &amp;&amp; collision_timer == 0) { //No collision and timer has run continue as normal
    //Follow mouse on left click hold
    if(mouse_check_button(mb_left)) {
        steering = vect_add(steering, sb_seek_arrive(mouse_x,mouse_y,256,15));
    }
    //Follow prey
    if(target_obj != noone) {
        steering = vect_add(steering, sb_pursuit(target_obj,5));
    }
    steering = vect_add(steering, sb_wander(128,160,60,3));
    steering = vect_add(steering, sb_alignment(demo_drone_chaser,256,1));
    steering = vect_add(steering, sb_separation(demo_drone_chaser,128,3));
    steering = vect_add(steering, sb_cohesion(demo_drone_chaser,368,2));
    steering = vect_add(steering, sb_avoid_collision(oMeteor,80,200,8));
} else { //Colliding and/or timer hasn't finished, run these steering behaviours instead
    steering = vect_add(steering, sb_wander(64,80,30,1));
    steering = vect_add(steering, sb_flee(flee_x,flee_y,64));
    steering = vect_add(steering, sb_avoid_collision(oMeteor,20,100,6));
}

//## Steering Behaviours go above here ##//


//Limit steering by max_force
steering = vect_truncate(steering, max_force); 

// Limit velocity to max_speed
velocity = vect_truncate(vect_add(velocity, steering),max_speed); 

//Add velocity to position
position = vect_add(position, velocity);


//Check for collision with solid_obj.
flee_obj = instance_place(position[1], position[2], solid_obj);
if(flee_obj != noone) { //Collision found
    is_colliding = true;
    //Set flee point
    flee_x = flee_obj.x;
    flee_y = flee_obj.y;
    //Don't update XY to new position.
    position[1] = x;
    position[2] = y;
    //Reset collision_timer
    collision_timer = collision_counter;
} else {
    is_colliding = false;
    //Reduce timer by 1, but don't go below 0.
    collision_timer = max(0, collision_timer - 1); 
    //update xy
    x = position[1];
    y = position[2];
}

image_angle = vect_direction(velocity);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen Wrap

if position[1] &gt; room_width position[1] = 0;
if position[2] &gt; room_height position[2] = 0;
if position[1] &lt; 0 position[1] = room_width;
if position[2] &lt; 0 position[2] = room_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hunting

//Find nearest target
var nearest_target = instance_nearest(x,y,demo_drone_chasee);
//Get distance
var target_distance = point_distance(x,y,nearest_target.x,nearest_target.y);

if(target_distance &lt; target_range) { //Is within target range
    target_obj = nearest_target;
} else { //Outside of target range
    target_obj = noone;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sprite with colourisation
//If you are not colourising sprites you can delete this draw event entirely.

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
