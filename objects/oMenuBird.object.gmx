<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouse_clear(mb_left);
mouse_clear(mb_right);

c1 = make_color_rgb(45,79,175);
c2 = make_color_rgb(218,2,167);
c3 = make_color_rgb(77,253,120);
c4 = make_color_rgb(253,209,77);
c5 = make_color_rgb(253,106,30);
cStart = choose(c1,c3,c5);
cDest = choose(c2,c4);
objectAge = 0;
cycleDuration = 60*4;

//make(vw/2,vh/2,columnB);
//make(vw/2+vw/5,vh-vh/4+20,oTitleDog);
make(vw/2+vw/5,vh-vh/4+20,oTitleBird);

noisesurf = -1;
starssurf = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surface_free(noisesurf);
surface_free(noisesurf);
surface_free(starssurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if objectAge &gt; 10 {
    score=0;
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objectAge += 1;

if !surface_exists(noisesurf) noisesurf = surface_create(vw,vh);
if !surface_exists(starssurf) starssurf = surface_create(vw,vh);

image_blend = merge_color(cStart,cDest,objectAge/cycleDuration);
if objectAge == cycleDuration {
    while cDest == image_blend {
        objectAge = 0;
        cStart = cDest;
        cDest = choose(c1,c2,c3,c4,c5);
    }
}

draw_rectangle_colour(0,0,vw,vh,background_color,background_color,c_black,c_black,false);
bg_color = background_color;


///////////////////////////////////
// draw starfields
///////////////////////////////////

if surface_exists(starssurf) {
    surface_set_target(starssurf);
    draw_clear_alpha(c_white,0)

    var starfieldAlpha = 1;

    for (var i=0;i&lt;background_vspeed[0]/8;i+=1) {
        draw_background_tiled_ext(bgStarfield,0,background_y[0]+i*2,2,2,c_blue,starfieldAlpha);
        draw_background_tiled_ext(bgStarfieldTop,0,background_y[1]+i*3,2,2,c_white,starfieldAlpha);
    }

    draw_background_tiled_ext(bgStarfield,0,background_y[0],2,2,merge_color(c_white,c_blue,abs(sin(objectAge*.002))),1);

    // draw twinkle blocker circles
    for (var i=0;i&lt;3;i+=1) {
        draw_set_blend_mode_ext(9,1);
        draw_circle(twinkleSpotX[i],twinkleSpotY[i],32,false);
        draw_set_blend_mode(bm_normal);

        twinkleSpotX[i] += tXVel[i];
        twinkleSpotY[i] += tYVel[i];
        if twinkleSpotX[i] &gt;= vw or twinkleSpotX[i] &lt;= 0 {
            tXVel[i] = -sign(tXVel[i])*choose(1,2,.5);
        }

        if twinkleSpotY[i] &gt;= vh or twinkleSpotY[i] &lt;= 0 {
            tYVel[i] = -sign(tYVel[i])*choose(1,2,.5);
        }
    }

    surface_reset_target();


    if !ded {
        draw_set_alpha(starAlpha);
        draw_surface_stretched(starssurf, 0, 0, display_get_gui_width(), display_get_gui_height());
        draw_set_alpha(1);
    }
}

//draw_noisesurf();
/*
draw_set_blend_mode_ext(5,3);
draw_sprite_ext(sGridBGTall,0,vw/2,vh/2+80,scale,scale,0,merge_color(image_blend,c_white,.5),.5);

draw_set_blend_mode_ext(9,2);
draw_sprite_ext(sOvalGrad,0,vw/2,120,2,2,0,c_white,.5);
*/
/*
draw_set_blend_mode_ext(6,3);
draw_sprite_ext(sTitleText,0,vw/2,120,scale,scale,0,c_white,1);
draw_set_blend_mode_ext(3,7);
draw_sprite_ext(sRectangleGrad,0,vw/2,vh/2-40,1,1+(irandom(10)-5)*.01,0,c_white,1);
draw_set_blend_mode(bm_normal);
draw_sprite_ext(sMenuSubtitle,0,vw/2,vh/2-45,1,1,0,c_white,1);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
