<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouse_clear(mb_left);
mouse_clear(mb_right);

c1 = make_color_rgb(45,79,175);
c2 = make_color_rgb(218,2,167);
c3 = make_color_rgb(77,253,120);
c4 = make_color_rgb(253,209,77);
c5 = make_color_rgb(253,106,30);
cStart = choose(c1,c3,c5);
cDest = choose(c2,c4);
objectAge = 0;
cycleDuration = 60*4;

noisesurf = -1;
starssurf = -1;
noiseblendsurf = 4;
noiseblenddest = 2;

rainbowoffset = 0;
rainbowBlend = 0;
objectAge = 0;

image_speed = .125;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///surface_free(noisesurf);
surface_free(noisesurf);
surface_free(starssurf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch irandom(3) {
    case 0:
        noiseblendsurf = 4;
        noiseblenddest = 2;
    break;
    case 1:
        noiseblendsurf = 2;
        noiseblenddest = 2;
    break;
    case 2:
        noiseblendsurf = 3;
        noiseblenddest = 2;
    break;
    case 3:
        noiseblendsurf = 7;
        noiseblenddest = 4;
    break;
}

alarm[11] = choose(120,150,180);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objectAge += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if objectAge &gt; 10 {
    score=0;
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objectAge += 1;

var surf_w = base_w;
var surf_h = base_h;

if !surface_exists(noisesurf) noisesurf = surface_create(surf_w,surf_h);

image_blend = merge_color(cStart,cDest,objectAge/cycleDuration);
if objectAge == cycleDuration {
    while cDest == image_blend {
        objectAge = 0;
        cStart = cDest;
        cDest = choose(c1,c2,c3,c4,c5);
    }
}

draw_rectangle_colour(0,0,vw,vh,background_color,background_color,c_black,c_black,false);
bg_color = background_color;

draw_set_blend_mode(bm_normal);

background_hspeed[0] = -2;
background_hspeed[1] = -1;

///////////////////////////////////
// draw starfields
///////////////////////////////////

var _c1 = make_color_rgb(255,255,255);
var _c2 = make_color_rgb(0,0,255);

// draw noise

draw_set_blend_mode_ext(4,2);

if surface_exists(noisesurf) {
    // draw new noise every n frames
    surface_set_target(noisesurf);
    if frac(objectAge/30) == 0 {
        switch irandom(1) {
            case 0:
                //draw_sprite_ext(sBrak,0,vw/2+irandom(256)-128,vh/2+irandom(256)-128,1,1,1,c_white,.5);
                draw_sprite_ext(sFilmGrain,irandom(2),vw/2+irandom(128)-64,vh/2+irandom(128)-64,choose(1,-1,2,-2),choose(1,-1,2,-2),1,c_white,.2);
            break;
            case 1:
                draw_sprite_ext(sPaper,0,vw/2+irandom(128)-64,vh/2+irandom(128)-64,choose(1,-1,2,-2),choose(1,-1,2,-2),1,c_white,.5);
            break;
        }
    } else {
        // fade
        draw_set_alpha(.001);
        var c_fade = merge_color(bg_color,c_black,0);
        draw_rectangle_colour(0,0,vw,vh,c_fade,c_fade,c_fade,c_fade,false);
        draw_set_alpha(1);

        if rainbowBlend == 0 {
            draw_set_blend_mode_ext(3,3);
            if irandom(400) == 1 rainbowBlend = 1;
        } else {
            draw_set_blend_mode_ext(9,10);
            if irandom(400) == 1 rainbowBlend = 0;
        }

        draw_sprite_ext(sRainbowSweep,image_index+rainbowoffset,0,0,1,1,0,c_white,1);
        draw_set_blend_mode(bm_normal);

        if irandom(180) == 1 rainbowoffset = irandom(18);

        if irandom(400) == 1 {
            draw_clear_alpha(c2,.01);
            draw_set_alpha(1);
            draw_rectangle_color(0,0,surf_w,surf_h,c_black,c_black,c_black,c_black,false);
        }
    }

    draw_set_blend_mode_ext(5,6);
    // note that we don't need to scale this owl up bc its drawn to a surface that will later be scaled
    draw_sprite_ext(sOwlFlies,image_index-1,surf_w/2-6,surf_h/2,1.8,1.8,image_angle,merge_color(_c1,_c2,abs(sin(objectAge*.0025))),abs(sin(objectAge*.004)));
    draw_set_blend_mode(bm_normal);
    surface_reset_target();

    //draw_surface_stretched_ext(noisesurf,0,0,display_get_gui_width(), display_get_gui_height(),merge_color(_c1,_c2,abs(sin(objectAge*.001))),1);
}

draw_set_blend_mode_ext(5,5);
//makeBlendTester();
draw_surface_stretched_ext(noisesurf,0,0,vw,vh,c_white,1);
//makeBlendTester();

draw_set_blend_mode(bm_normal);
//draw_sprite_ext(sOwlFlies,image_index,vw/2+nrandom(4),vh/2+nrandom(2),1.7,1.7,image_angle,merge_color(c_gray,c_blue,abs(sin(objectAge*.001))),1);
draw_sprite_ext(sOwlFlies,image_index,vw/2+nrandom(4),vh/2+nrandom(2),1.7*scale,1.7*scale,image_angle,c_white,1);

draw_set_blend_mode(bm_normal);

display_set_gui_size(room_width, room_height);

/*
if !instance_exists(controlPoint) {
    with make(oMiniThex) followBezier = true;
    cp0 = make(vw/2-64,vh/2,controlPoint);
    cp1 = make(vw/2-16,vh/2,controlPoint);
    cp2 = make(vw/2+16,vh/2,controlPoint);
    cp3 = make(vw/2+64,vh/2,controlPoint);
}
*/

/*
if !instance_exists(controlPoint) {
    bID = make(oBezier);
    with make(oMiniThex) {
        depth = -6;
        followBezier = true;
        bezierID = other.bID;
    }
}
*/
/*
var ww = 20;

for (i=0;i&lt;ww;i+=1) {
    a = Bezier_Point_Find(i*.05,cp0.x,cp0.y,cp1.x,cp1.y,cp2.x,cp2.y,cp3.x,cp3.y);
    draw_set_color(c_red);
    draw_circle(a[0],a[1],4,false);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
