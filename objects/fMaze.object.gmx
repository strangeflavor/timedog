<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>formationParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rate = 2;
blocksize = 16;
mm = -blocksize*2;
mazeSize = 1280;
mazeSpeed = choose(5,6,7);

alarm[0] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat (2) {
    for (var i=0;i&lt;room_width;i+=blocksize) {
        make(i,mm,oMazeBlock);
    }

    mm -= blocksize;
}

// sometimes place megablock
if irandom(3) == 1 and abs(mm) &lt; abs(mazeSize)-4*blocksize {
    with make((irandom(((room_width-(blocksize*2))/blocksize))+1)*blocksize,mm-blocksize,oMazeBlock) {
        image_xscale = 6;
        image_yscale = 6;
        image_blend = c_gray;
        depth -= 1;
        repeat 8 {
            with instance_place(x,y,oMazeBlock) {
                value = 0;
                kill();
            }
        }

        if irandom(16) == 1 kill();
    }
}

if abs(mm) &gt; abs(mazeSize) {
    var xpos = (irandom(((room_width-(blocksize*2))/blocksize))+1)*blocksize;

    if instance_number(mazeEater) &lt; 2 {
        repeat(choose(1,1,2)) {
            with make(xpos+irandom(room_width/3)-room_width/6,32,mazeEater) {
                ylimit = -other.mazeSize;
                //vspeed = -1;
            }
        }
    }

    with oMazeBlock {
        speed = other.mazeSpeed;
        direction = 270;
        active = true;
    }

    instance_destroy();
} else {
    alarm[0] = rate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
