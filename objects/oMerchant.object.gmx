<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMerchantTop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oLargeEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killWhenOffscreen = false;
midDistance = -10;

y = -200;
TweenSimpleMove(x,y,x,ystart,60,EaseOutQuint);
//vspeed = 1;

bottomID = make(oLargeEnemy);
with bottomID {
    killWhenOffscreen = false;
    value = 0;
    sprite_index = sMerchantBottom;
    HP = 150;
}

turretID = make(oLargeEnemy);
with turretID {
    killWhenOffscreen = false;
    value = 0;
    sprite_index = sMerchantTurret;
    HP = 18;
    cy_offset = 133 - 75;
    
}

pilotID = make(oMerchantPilot);
pilotID.killWhenOffscreen = false;

state = _WAIT;

//alarm[1] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(bottomID) kill(bottomID);
if instance_exists(turretID) kill(turretID);
if instance_exists(pilotID) pilotID.flee = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//s0 = make(x,y-170,oSatellite);
s1 = make(x-150,y-140,oSatellite);
s2 = make(x+150,y-140,oSatellite);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//////////////
// rotate..
//////////////

if state == _BACKANDFORTH_HORI {
    if speed_sign &gt; 0 {
        image_angle = lerp(image_angle, -8, .01);
    } else {
        image_angle = lerp(image_angle, 8, .01)
    }
}

// move components
if instance_exists(bottomID) {
    bottomID.x = x;
    bottomID.y = y + midDistance;
    bottomID.image_angle = image_angle;
} else {
    if instance_exists(turretID) kill(turretID);
}

if instance_exists(turretID) {
    turretID.x = x;
    turretID.y = y + midDistance;
    turretID.image_angle = image_angle;
}

if instance_exists(pilotID) {
    pilotID.x = xprevious;
    pilotID.y = y - 80;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var bID;

if active and instance_exists(oShip) {
    switch state {
        case _WAIT:
            //if objectAge &gt; 10 image_angle = lerp(image_angle,0,.99);
            if objectAge &gt; 50 and instance_exists(turretID) {
                state = _BACKANDFORTH_HORI;
                objectAge = 0;

                    /*
                    y += .3*sin(objectAge*.02);
    
                    if objectAge &gt; 90 and midDistance &lt; 50 midDistance += 1;
    
    
    
                    if instance_exists(turretID) {
                        var freq = 36;
                        if (objectAge &gt; 240 and objectAge &lt; 480) or objectAge &gt; 800 freq = 24;
    
                    } else {
                        state = _BACKANDFORTH_HORI;
                        objectAge = 0;
                    }
                }
                */
            }
        break;
        case _BACKANDFORTH_HORI:
            enemy_move_patrol(0,2,0);

            if instance_exists(turretID) {
                var freq = 150;
                //if objectAge &gt; 360 freq = 90;
    
                if objectAge &gt; 90 {
                    if objectAge mod freq = 0 {
                        with make(x,turretID.y+100,shot_fork) {
                            sprite_index = sShot1;
                            rate = 12;
                        }
                    }
                    
                    if (objectAge + 40) mod freq = 0 {
                        with make(x,turretID.y+100,shot_fork) {
                            sprite_index = sShot1;
                            rate = 9;
                        }
                    }
                }

                if objectAge &gt; 360 {
                    if objectAge mod (freq*2+30) = 0 {
                        with make(shot_missileFlurry) {
                            creatorID = other.id;
                            rounds = floor(other.objectAge/360);
                            rate = 9;
                        }
                    }
                }
            } else {
                //if shot_last_hit_x &lt; x {
                if x &lt; vw/2 {
                    x -= 30;
                    image_angle = 30;
                } else {
                    x += 30;
                    image_angle = -30;
                }

                y -= 12;
                state = _WAIT;
                objectAge = 0;
                TweenSimpleRotate(image_angle,0,30,EaseInOutBack);
                TweenSimpleMove(x,y,vw/2,ystart,70,EaseInOutBack);
                // destroyed turret
            }

            if !instance_exists(bottomID) {
                // destroyed bottom!!!
                state = -1;
            }
        break;
    }
}


                    /*
                    if objectAge mod freq == 0 {
                        // center
                        var yo = 100;

                        if (objectAge &gt; 480) {
                            var s = 3;
                            // left
                            if oShip.x &gt; vw/2 {
                                bID = make(x-40+nrandom(60),y+yo,oMissile);
                                bID.direction = 270 + 30 - 50 
                                bID.gravity_direction = point_direction(x,y+yo,oShip.x-40,oShip.y);
                            } else {
                                bID = make(x-40-nrandom(60),y+yo,oMissile);
                                bID.direction = 270 + 30 + 50;
                                bID.gravity_direction = point_direction(x,y+yo,oShip.x-40,oShip.y);
                            }

                            bID.sprite_index = sShot4;
                            bID.speed = s-1+nrandom(2);
                            bID.friction = .075;
                            bID.gravity = .4;
                            bID.direction_to_angle = true;

                            // right
                            if oShip.x &gt; vw/2 {
                                bID = make(x+40+nrandom(60),y+yo,oMissile);
                                bID.direction = 270 + 30 + 50
                                bID.gravity_direction = point_direction(x,y+yo,oShip.x+40,oShip.y);
                            } else {
                                bID = make(x+40-nrandom(60),y+yo,oMissile);
                                bID.direction = 270 - 30 - 50;
                                bID.gravity_direction = point_direction(x,y+yo,oShip.x+40,oShip.y);
                            }

                            bID.sprite_index = sShot4;
                            bID.speed = s-1+nrandom(2);
                            bID.friction = .075;
                            bID.gravity = .4;
                            bID.direction_to_angle = true;
                        } else {
                            var s = 2;
                        }

                        if oShip.x &gt; vw/2 {
                            bID = make(x+nrandom(60),y+yo,oMissile);
                            bID.direction = 270 + 30 
                        } else {
                            bID = make(x-nrandom(60),y+yo,oMissile);
                            bID.direction = 270 - 30;
                        }

                        bID.sprite_index = sShot4;
                        bID.speed = s+nrandom(2);
                        bID.friction = .075;
                        bID.gravity_direction = point_direction(x,y+yo,oShip.x,oShip.y);
                        bID.gravity = .5;
                        bID.direction_to_angle = true;
                    }
                    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
