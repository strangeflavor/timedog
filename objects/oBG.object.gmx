<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(oBG) &gt; 1 kill(self);
objectAge = 0;
noisesurf = -1;
starssurf = -1;
/*
shock_surf = -1;

var_time_var = 0;
uni_time = shader_get_uniform(shd_shockwave,"time");
uni_mouse_pos = shader_get_uniform(shd_shockwave,"mouse_pos");
uni_resolution = shader_get_uniform(shd_shockwave,"resolution");

var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_shock_amplitude = shader_get_uniform(shd_shockwave,"shock_amplitude");
var_shock_amplitude = 10;

uni_shock_refraction = shader_get_uniform(shd_shockwave,"shock_refraction");
var_shock_refraction = 0.8;

uni_shock_width = shader_get_uniform(shd_shockwave,"shock_width");
var_shock_width = 0.1;
*/
//background_index[1] = bgStarfieldTop;
//background_index[0] = bgStarfield;
//background_visible[0] = true;
//background_visible[1] = true;

noisealpha = 1;

pos = 0;

for (var i=0;i&lt;3;i+=1) {
    twinkleSpotX[i] = vw/2+irandom(80)-40;
    twinkleSpotY[i] = vh/2+irandom(80)-40;
    tXVel[i] = choose(1,-1)*choose(1,2,.5);
    tYVel[i] = choose(1,-1)*choose(1,2,.5);
}

bg_color_rate = .008;
ded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player died

oBG.ded = true;
oBG.bg_color_rate = .05;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objectAge += 1;

background_y[0] += background_vspeed[0];
background_y[1] += background_vspeed[1];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(noisesurf) noisesurf = surface_create(view_wview[0], view_hview[0]);
if !surface_exists(starssurf) starssurf = surface_create(view_wview[0], view_hview[0]);
//if !surface_exists(shock_surf) shock_surf = surface_create(view_wview[0], view_hview[0]);

///////////////////////////////////
// draw flat bg color cycle
///////////////////////////////////

var c1 = make_color_rgb(0,0,30);
var c2 = make_color_rgb(0,5,50);

if ded {
    c1 = make_color_rgb(255,0,0);
    c2 = make_color_rgb(0,10,255);
}

var bg_color = merge_color(c1,c2,abs(sin(objectAge*bg_color_rate)));
draw_set_color(bg_color);
draw_rectangle(0,0,vw,vh,false);

///////////////////////////////////
// draw to and draw noise surface w/ blend mode
///////////////////////////////////

draw_set_blend_mode_ext(4,2);

if surface_exists(noisesurf) {
    if view_wview[1] == vw and view_current == 0 {
        // draw new noise every n frames
        surface_set_target(noisesurf);
        if frac(objectAge/30) == 0 {
            switch irandom(1) {
                case 0:
                    //draw_sprite_ext(sBrak,0,vw/2+irandom(256)-128,vh/2+irandom(256)-128,1,1,1,c_white,.5);
                    draw_sprite_ext(sFilmGrain,irandom(2),vw/2+irandom(128)-64,vh/2+irandom(128)-64,choose(1,-1,2,-2),choose(1,-1,2,-2),1,c_white,.2);
                break;
                case 1:
                    draw_sprite_ext(sPaper,0,vw/2+irandom(128)-64,vh/2+irandom(128)-64,choose(1,-1,2,-2),choose(1,-1,2,-2),1,c_white,.5);
                break;
            }
        } else {
            // fade
            draw_set_alpha(.01);
            var c_fade = merge_color(bg_color,c_black,0);
            draw_rectangle_colour(0,0,vw,vh,c_fade,c_fade,c_fade,c_fade,false);
            draw_set_alpha(1);

            if irandom(400) == 1 {
                draw_clear_alpha(c2,.01);
                draw_set_alpha(1);
                draw_rectangle_color(0,0,vw,vh,c_black,c_black,c_black,c_black,false);
            }
        }
        surface_reset_target();
    }

    draw_surface_stretched(noisesurf, 0, 0, display_get_gui_width(), display_get_gui_height());
    draw_set_blend_mode(bm_normal);
}

draw_set_alpha(.5)
draw_rectangle_colour(0,0,vw,vh,c_black,c_black,c_black,c_black,false);
draw_set_alpha(1)

///////////////////////////////////
// draw starfields
///////////////////////////////////

if surface_exists(starssurf) {
    surface_set_target(starssurf);
    draw_clear_alpha(c_white,0)
        
    var starfieldAlpha = 1;

    for (var i=0;i&lt;background_vspeed[0]/8;i+=1) {
        draw_background_tiled_ext(bgStarfield,0,background_y[0]+i*2,2,2,c_blue,starfieldAlpha);
        draw_background_tiled_ext(bgStarfieldTop,0,background_y[1]+i*3,2,2,c_white,starfieldAlpha);
    }

    draw_background_tiled_ext(bgStarfield,0,background_y[0],2,2,merge_color(c_white,c_blue,abs(sin(objectAge*.002))),1);
    
    // draw twinkle blocker circles
    for (var i=0;i&lt;3;i+=1) {
        //draw_set_color(c_black);
        //make(surfaceTester); //7,9
        //draw_set_blend_mode_ext(surfaceTester.srcmode,surfaceTester.destmode);
        draw_set_blend_mode_ext(9,1);
        draw_circle(twinkleSpotX[i],twinkleSpotY[i],32,false);
        draw_set_blend_mode(bm_normal);

        twinkleSpotX[i] += tXVel[i];
        twinkleSpotY[i] += tYVel[i];
        if twinkleSpotX[i] &gt;= vw or twinkleSpotX[i] &lt;= 0 {
            tXVel[i] = -sign(tXVel[i])*choose(1,2,.5);
        }

        if twinkleSpotY[i] &gt;= vh or twinkleSpotY[i] &lt;= 0 {
            tYVel[i] = -sign(tYVel[i])*choose(1,2,.5);
        }
    }
    
    
    surface_reset_target();

    draw_surface_stretched(starssurf, 0, 0, display_get_gui_width(), display_get_gui_height());
    draw_set_alpha(1);
        
    //make(surfaceTester); //7,9
    //draw_set_blend_mode_ext(surfaceTester.srcmode,surfaceTester.destmode);
    /*
    draw_set_blend_mode_ext(1,2);
    draw_rectangle_color(0,0,vw,vh,c_black,c_black,c_white,c_white,false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    */
}

///////////////////////////////////
// draw aura around player ship
///////////////////////////////////

draw_set_blend_mode_ext(9,2);
draw_set_alpha(irandom(10)*.1);
if instance_exists(oShip) draw_sprite(sGradientCircle,0,oShip.x+irandom(6)-3,oShip.y+irandom(6)-3);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);

///////////////////////////////////
// draw to scene fringe shader
///////////////////////////////////

draw_SHADER_sceneFringe(1);

//////////////////////////////////
// draw shockwave
//////////////////////////////////

if instance_exists(oChargeShotExplode) {
    //draw_SHADER_shockwave(mouse_x,mouse_y);
    draw_SHADER_magnify(true,oChargeShotExplode.objectAge);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
