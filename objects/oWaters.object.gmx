<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surfy = -1;

numStars = 32;
MAX_DEPTH = 32;

for( var i = 0; i &lt; numStars; i++ ) {
      star_x[i] = irandom(50) - 25;
      star_y[i] = irandom(50) - 25;
      //star_z[i] = irandom(MAX_DEPTH);
}

star_z = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// drawing &amp; surface
var halfWidth  = vw / 2;
var halfHeight = vh / 2;

if !surface_exists(surfy) surfy = surface_create(room_width,room_height);

surface_set_target(surfy);
draw_clear_alpha(c_black, 0);


// shader
var timeMult = 0.0025; //make the animation slower or faster...
var time = current_time * timeMult;
var oscillatorValue = sin(time);
var oscillatorValueAbs = abs(sin(time));

if os_type == os_android
{     
    vRatio = display_get_gui_width() / display_get_gui_height(); //distort the sampler uvs according to the screen ratio in the mobile devices...
}else{
    vRatio = 1.0;
}
    
var shader      = shader_blur;
var u_vRatio    = shader_get_uniform(shader, "u_vRatio");
var u_threshold = shader_get_uniform(shader, "u_threshold");
//var radius = 0.005;

for( var i = 0; i &lt; numStars; i++ ) {
/*
  star_z[i] -= 0.05;

  if( star_z[i] &lt;= 0 ) {
    star_x[i] = irandom(50)-25;
    star_y[i] = irandom(50)-25;
    star_z[i] = MAX_DEPTH;
  }
*/

 // star_x[i] -= 0.05;

  if( star_x[i] &lt;= -25 ) {
    star_x[i] = irandom(50)-25;
    star_y[i] = irandom(50)-25;
  }



 // var k  = 128.0 / star_z[i];
  var k  = 128.0 / star_z;
  var px = star_x[i] * k + halfWidth;
  var py = star_y[i] * k + halfHeight;

  if( px &gt;= 0 &amp;&amp; px &lt;= vw &amp;&amp; py &gt;= 0 &amp;&amp; py &lt;= vh ) {
        //var size = (1 - star_z[i] / 32.0) * 5;
        //draw_set_color(merge_color(c_white,c_black,star_z[i]/MAX_DEPTH));
        var size = (1 - star_z / 32.0) * 2;
        draw_set_color(merge_color(c_white,c_black,star_z/MAX_DEPTH));
        draw_circle(px,py,size,false);
  }
}

surface_reset_target();

shader_set(shader);
shader_set_uniform_f(u_vRatio, vRatio);
shader_set_uniform_f(u_threshold, radius * oscillatorValue);
draw_surface_stretched(surfy, 0, 0, display_get_gui_width(), display_get_gui_height());
display_set_gui_size(room_width, room_height);
shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
