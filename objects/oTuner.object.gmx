<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(oTuner) &gt; 1 kill(self);

for (k=0;k&lt;=9;k+=1) {
    tuneVarName[k] = '';
    tuneDisplay[k] = false;
    tuneAmount[k] = 0;
    tuneStartingAmount[k] = 0;
    tuneIncrementOverride[k] = 0;
}

tuneIncrement = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _increment = tuneIncrement;

for (k=1;k&lt;=9;k+=1) {
    if tuneIncrementOverride[k] != 0 _increment = tuneIncrementOverride[k];

    if keyboard_check(ord(string(k))) {
        if (keyboard_check_pressed(vk_up)) {
            tuneAmount[k] += _increment;
        } else {
             if (keyboard_check_pressed(vk_down)) {
                tuneAmount[k] -= _increment;
             } else {
                if (keyboard_check_pressed(vk_left)) {
                    if keyboard_check(vk_shift) {
                        tuneIncrement -= .1;
                    } else {
                        if keyboard_check(vk_control) {
                            tuneIncrement -= 10;
                        } else {
                            tuneIncrement -= 1;
                        }
                    }
                } else {
                    if (keyboard_check_pressed(vk_right)) {
                        if keyboard_check(vk_shift) {
                            tuneIncrement += .1;
                        } else {
                            if keyboard_check(vk_control) {
                                tuneIncrement += 10;
                            } else {
                                tuneIncrement += 1;
                            }
                        }
                    }
                }
                /*
                if (keyboard_check_pressed(vk_left)) {
                    tuneAmount[k] -= tuneIncrement*10;
                } else {
                    if (keyboard_check_pressed(vk_right)) {
                        tuneAmount[k] += tuneIncrement*10;
                    }
                }
                */
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_font(fArialLarge);
draw_set_halign(fa_right)
draw_set_valign(fa_bottom)

var showTuneIncrement = false;

for (k=0;k&lt;=9;k+=1) {
    if keyboard_check(ord(string(k))) or tuneDisplay[k] == true {
        tuneDisplay[k] = true;
        if keyboard_check(ord(string(k))) draw_set_color(c_red) else draw_set_color(c_lime);
        draw_text(vw - 16, vh-vh/3+k*24, tuneVarName[k]+': '+string(tuneStartingAmount[k] + tuneAmount[k]));
        showTuneIncrement = true;
    }
}

if showTuneIncrement {
    draw_set_color(c_orange);
    draw_text(vw - 16, vh-vh/3-12,'+/-: '+string(tuneIncrement));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
