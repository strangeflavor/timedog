<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sFireAtPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oSteering</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>explosionType = sMedExplosion;
value=-5;

HP = 1.5;

image_xscale = scale*2;
image_yscale = scale*2;

//speed = 5;

makeTurret(0,0,0);
/*
phase[0] = enemy_move;
phaseArguments[0,0] = 3; // max speed
phaseArguments[0,1] = .1; // max force
*/
phase[0] = enemy_steering_player;
phaseArguments[0,0] = 3; // max speed
phaseArguments[0,1] = .1; // max force

/*
phaseArguments[0,0] = vw/3; // destx
phaseArguments[0,1] = vh/2+128; // desty
phaseArguments[0,2] = 3; // max speed
phaseArguments[0,3] = .7; // max force
*/

phaseCondition[0] = _PHASE_CONDITION_TIME;
phaseConditionArguments[0,0] = 50;

phase[1] = enemy_steering_player;
phaseArguments[1,0] = 0.5; // max speed
phaseCondition[1] = _PHASE_CONDITION_TIME;
phaseConditionArguments[1,0] = 30;

phase[2] = enemy_FireInDirection;
phaseArguments[2,0] = 0; // turret
phaseArguments[2,1] = 1; // rounds to fire
phaseCondition[2] = _PHASE_CONDITION_TIME;
phaseConditionArguments[2,0] = 12;

phase[3] = enemy_move_rotate;
phaseArguments[3,0] = -80; // destx
phaseArguments[3,1] = -32; // desty
phaseArguments[3,2] = 3; // speed
phaseArguments[3,3] = 4; // rotation amount
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_angle = direction;

/*
if objectAge &lt; 50 {
    if frac(objectAge/9) == 0 {
        if instance_exists(oShip) direction = point_direction(x,y,oShip.x,oShip.y);// else direction = irandom(360);
    }

    image_angle = direction;
} else {
    if currentPhase &lt; 2 {
        if frac(objectAge/18) == 0 {
            if instance_exists(oShip) direction = point_direction(x,y,oShip.x,oShip.y);// else direction = irandom(360);
        }
        image_angle = direction;
    }
}

if currentPhase == 1 {
    if speed &gt; 0 speed *= .93;
    if speed &lt; .2 speed = 0;
}
*/

if currentPhase == 2 {
    enemy_move_rotate(oShip.x,oShip.y,0,.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
