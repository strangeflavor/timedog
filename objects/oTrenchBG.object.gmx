<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>oBG</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cloudsurf[0] = -1;
cloudsurf[1] = -1;
cloudsurf[2] = -1;
cloudsurf[3] = -1;
cloudsurf[4] = -1;
cloudsurf[5] = -1;

noisesurf = -1;

doBGTween = true;
BGtween_startspeed[0] = 1;
BGtween_stopspeed[0] = 8;
BGtween_startspeed[1] = .5;
BGtween_stopspeed[1] = 4;
BGtween_startspeed[2] = .25;
BGtween_stopspeed[2] = 2;
BGtween_dur = 90;
BGtween_ease = EaseInQuint;

xo[0] = 0;
xo[1] = 0;
xo[2] = 0;


background_color = c_red;

with make(oWaters) {
    star_z_layer = 18;
    radius = 0.0025;
    oscillatorValue = .6;
}

center_x = vw/2;
center_y = vh/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(noisesurf) noisesurf = surface_create(view_wview[0], view_hview[0]);
if !surface_exists(starssurf) starssurf = surface_create(view_wview[0], view_hview[0]);

///////////////////////////////////
// draw flat bg color cycle
///////////////////////////////////

c1 = make_color_rgb(0,0,30);
c2 = make_color_rgb(0,5,50);

if ded {
    c1 = make_color_rgb(255,0,0);
    c2 = make_color_rgb(0,10,255);
}

bg_color = merge_color(c1,c2,abs(sin(objectAge*bg_color_rate)));
draw_set_color(bg_color);
draw_rectangle(0,0,vw,vh,false);

///////////////////////////////////
// draw to and draw noise surface w/ blend mode
///////////////////////////////////

draw_noisesurf();

if !ded draw_set_alpha(.5)
draw_rectangle_colour(0,0,vw,vh,c_black,c_black,c_black,c_black,false);
draw_set_alpha(1)

///////////////////////////////////
// draw starfields
///////////////////////////////////

if surface_exists(starssurf) {
    surface_set_target(starssurf);
    draw_clear_alpha(c_white,0)

    var starfieldAlpha = 1;

    /*
    for (var i=0;i&lt;background_vspeed[0]/8;i+=1) {
        //draw_background_tiled_ext(bgStarfield,0,background_y[0]+i*2,2,2,c_blue,starfieldAlpha);
        //draw_background_tiled_ext(bgStarfieldTop,0,background_y[1]+i*3,2,2,c_white,starfieldAlpha);
        draw_background_tiled_ext(bgPurpleStars,0,background_y[1]+i*3,2,2,c_white,starfieldAlpha);
    }
    */

    //draw_background_tiled_ext(bgStarfield,0,background_y[0],2,2,merge_color(c_white,c_blue,abs(sin(objectAge*.002))),1);
    //draw_background_tiled_ext(bgTechnoid,0,background_y[0],2,2,merge_color(c_white,c_blue,abs(sin(objectAge*.002))),starfieldAlpha);

    draw_rectangle_colour(0,0,vw,vh,c_black,c_black,c_dkgray,c_dkgray,false);

    surface_reset_target();

    if !ded {
        draw_set_alpha(starAlpha);
        draw_surface_stretched(starssurf, 0, 0, display_get_gui_width(), display_get_gui_height());
        draw_set_alpha(1);
    }
}

///// trench

var starfieldColor = c_white;

// 0 = lowest/deepest layer
var cloudblend;
cloudblend[0] = make_color_rgb(12,8,64);
cloudblend[1] = make_color_rgb(12,4,118);
cloudblend[2] = make_color_rgb(25,9,138);
cloudblend[3] = make_color_rgb(9,27,238);
cloudblend[4] = make_color_rgb(5,90,238);

var mx = 0;
if instance_exists(oShip) mx = -((oShip.x/base_w)-.5);

for (var i=2;i&gt;=0;i-=1) {
    if !surface_exists(cloudsurf[i]) {
        cloudsurf[i] = surface_create(base_w+200, 80);
        surface_set_target(cloudsurf[i]);

        draw_sprite_ext(sTrench,i,50+i*16,0,1,1,0,c_white,1);
        draw_sprite_ext(sTrench,i,base_w/2-20-i*16,0,-1,1,0,c_white,1);
        surface_reset_target();
    }

    /*
    if i == 3 xo = 5*sin(objectAge*.06);
    if i == 2 xo = 4*sin(objectAge*.04);
    if i == 1 xo = 3*sin(objectAge*.02);
    */

    if instance_exists(oShip) {
       //center_x = lerp(center_x,vw/2+(((oShip.x-vw)/vw ) + .5)*vw/1,.005);
       //center_y = lerp(center_y,vh/2+(((oShip.y-vh)/vh ) + .5)*vh/1,.01);
       //xo[i] = lerp(xo[i],vw/2+(((oShip.x-vw)/vw)*i*12),.01)
       xo[i] = -2*(((oShip.x-vw)/vw) +.5)*((2-i+1)*5);
    }

    //draw_surface_tiled_ext(cloudsurf[i],xo[i]-50,trench_rate*((objectAge*8)/(i+1)),2,2,c_white,1);
    draw_surface_tiled_ext(cloudsurf[i],xo[i]-50,(objectAge*background_vspeed[i]),2,2,c_white,1);
}

// dark edges
//makeBlendTester();
draw_set_blend_mode_ext(4,9);
draw_circle_colour(vw/2+nrandom(32),vh/2+nrandom(32),vh*2,c_white,c_black,false);
draw_set_blend_mode(bm_normal);


///////////////////////////////////
// draw aura around player ship
///////////////////////////////////

draw_set_blend_mode_ext(3,2);
//makeBlendTester();
draw_set_alpha(irandom(6)*.1);
if instance_exists(oShip) draw_sprite(sGradientCircle,0,oShip.x+irandom(6)-3,oShip.y+irandom(6)-3);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);


display_set_gui_size(room_width, room_height);
//draw_surface(application_surface,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
