// 2018-12-02 15:55:00
#event create
objectAge = 0;
HP = 1;
active = false;
invul = false;
invulTime = -1;
dangerous = true;
explosionType = _SMALL;
value = -1;
recoil = 0;
aimAtPlayer = false;
fireAge = -1;
fired = 0; // # of shots fired
image_scale(2);

explosion_blend = choose(c_yellow,c_red,c_blue,c_white);

turret_is_radial = false;
for (i=0;i<16;i+=1) {
    turret[i,0] = undefined;
    bhpg_turret[i] = -1;
}

///////////////////////////
// behavior/phase stuff
///////////////////////////

state = _NONE;
use_state_path = false;

yStop = vh*2

killWhenBelowScreen = true;
killWhenOffscreen = true;
offScreenTimer = 36;
waitTime = -1;

cx_offset = 0; // offset to add to x/y to get the 'true' center point of the enemy
cy_offset = 0; // NB, change the name, this is too similar to cx and cy but unrelated


phaseCreateVars();
runPhase = true;

// path stuff

path = -1;
path_endtime = -1;
path_endaction = path_action_continue;
killWhenPathComplete = false;

// orbital stuff

Angle = 0; // Current orbital angle
speed_sign = 1;

cx = -1; // center point for orbital movement
cy = -1; // to do: change this name lol

// bezier curve stuff

followBezier = false;
for (var i=0;i<16;i+=1) bezierObjectArray[i] = -1;
bezierIndex = 0;
bezierPos = 0;
bezierSpeed = 10;
bezierSpeedSign = 1;
bezierEndAction = 'reverse';
cpIndex = 0;

///////////////////////////
// formation stuff
///////////////////////////

amLeader = false;
hasLeader = false;

formationID = -1;
holdTimelineID = -1;

space = _NONE;
formationStartX = xstart;
formationStartY = ystart;

spawn_at_player_x = false;
spawn_at_player_y = false;

alarm[0] = 1;

#event destroy
// gotta check this even if inactive bc timeline needs to advance
if holdTimelineID > -1 {
    var holdFormationRemaining = removeEnemyFromFormationTracker(holdTimelineID);
    if holdFormationRemaining <= 0 { 
        levelManager.timeline_running = true;
    }
}

if active {
    if y < vh + 32*scale {
        sfx(sndDefeatEnemy);

        switch explosionType {
            case _SMALL:
                with make(oExplo) image_blend = other.explosion_blend;
            break;
            case _MED:
                with make(oExplo) image_blend = other.explosion_blend;
            break;
            case _LARGE:
                with make(x+cx_offset,y+cy_offset,oExploChain) {
                    size = 5;
                    rate = 5;
                    xrandom = 150;
                    yrandom = 40;
                    explosion = oLargeExplo;
                    explosion_scale = 3;
                    explosion_sprite_index = sLargeExplosion;
                    explosion_image_blend = -1;//other.explosion_blend;
                }
                repeat 3 make(x+cx_offset,y+cy_offset,Smoke);
            break;
        }

        if formationID > -1 {
            if removeEnemyFromFormationTracker(formationID) <= 0 value *= -1;
        }

        if value > 0 {
            if value == 1 {
                make(x,y,oPickup);
            } else {
                repeat value {
                    make(x+irandom(48)-24,y+irandom(48)-24,oPickup);
                }
            }
        }
    }
}

with shot_pattern {
    if creatorID == other.id kill();
}

// destroy any turrets owned by this enemy
for (i=0;i<16;i+=1) {
    if bhpg_turret[i] > -1 {
        with bhpg_turret[i] kill();
    } else {
        break;
    }
}

#event alarm0|active = true;
if waitTime < 0 {
    active = true;
    if spawn_at_player_x {
        x = oShip.x;
    }
    if spawn_at_player_y y = oShip.y;
}

#event alarm1|resume motion
friction = 0;
speed = pSpeed;
direction = pDirection;

#event step
if active {
    //////////////////////////
    // misc updates
    //////////////////////////

    objectAge += 1;

    if killWhenBelowScreen {
        if y > (vh + 64*scale) {
            value = 0;
            kill(self);
        }
    }

    if killWhenOffscreen {
        if offscreen() {
            if offScreenTimer <= 0 {
                value = 0;
                kill(self);
            }
            offScreenTimer -= 1;
            trace(offScreenTimer)
        } else {
            //offScreenTimer = 36;
        }
    }

    if invul and invulTime > -1 {
        invulTime -= 1;
        if invulTime < 0 invul = false;
    }

    if recoil > 0 {
        recoil -= 4;
        y+=4;
    }

    //////////////////////////
    // handle paths
    //////////////////////////

    if path_index == -1 {
        if path > -1 {
            //trace('enemy starting path at spd '+string(path_speed));
            path_start(path,path_speed,path_endaction,false);
        }
    } else {
        if (path_endtime > -1 and objectAge == path_endtime) {
            path = -1;
            path_end();
            if killWhenPathComplete kill();
        }
    }

    //////////////////////////
    // handle bezier curve
    //////////////////////////

    if followBezier {
        var bezID = bezierObjectArray[bezierIndex];
        if instance_exists(bezID) {
            var bp = Bezier_Point_Find(bezierPos,bezID.cpID[cpIndex].x,bezID.cpID[cpIndex].y,bezID.cpID[cpIndex+1].x,bezID.cpID[cpIndex+1].y,bezID.cpID[cpIndex+2].x,bezID.cpID[cpIndex+2].y,bezID.cpID[cpIndex+3].x,bezID.cpID[cpIndex+3].y);
            var isBeginning = false;
            var isEnd = false;

            if cpIndex == 0 isBeginning = true;
            if bezID.cpID[cpIndex + 4] == -1 isEnd = true;

            var speed_per_tick = bezierSpeedSign*bezierSpeed; //constant speed you want the object to move at

            if objectAge == 1 {
                x = bp[0];
                y = bp[1];
            } else {
                x_goal = bp[0];
                y_goal = bp[1];

                if bezierSpeedSign > 0 {
                    delta_x = x_goal - x;
                    delta_y = y_goal - y;
                } else {
                    delta_x = x - x_goal;
                    delta_y = y - y_goal;
                }

                goal_dist = sqrt( (delta_x * delta_x) + (delta_y * delta_y) )

                if (abs(goal_dist) > abs(speed_per_tick)) {
                    // move twd goal
                    ratio = speed_per_tick / goal_dist
                    x_move = ratio * delta_x  
                    y_move = ratio * delta_y
                    x = x_move + x;
                    y = y_move + y;
                } else {
                    // reached goal, advance position
                    x = x_goal;
                    y = y_goal;
    
                    // ok we're at the end of a bezier segment
                    if (bezierPos >= 1 and bezierSpeedSign > 0) or (bezierPos <= 0 and bezierSpeedSign < 0) {
                        // are we at the end of the whole series? if so, do something..
                        if (isEnd and bezierSpeedSign > 0) or (isBeginning and bezierSpeedSign < 0) {
                            switch bezierEndAction {
                                case 'next':
                                    // new path!
                                    bezierPos = 0;
    
                                    bezierIndex += 1;
                                    bezID = bezierObjectArray[bezierIndex];
                                    if bezID == -1 {
                                        bezierIndex = 0;
                                        bezID = bezierObjectArray[bezierIndex];
                                    }
                                break;
                                case 'reverse':
                                    // reverse speed
                                    bezierSpeedSign *= -1;
                                break;
                                case 'reset':
                                    // reset to start
                                    bezierPos = 0;
                                    cpIndex = 0;
                                    bp = Bezier_Point_Find(bezierPos,bezID.cpID[cpIndex].x,bezID.cpID[cpIndex].y,bezID.cpID[cpIndex+1].x,bezID.cpID[cpIndex+1].y,bezID.cpID[cpIndex+2].x,bezID.cpID[cpIndex+2].y,bezID.cpID[cpIndex+3].x,bezID.cpID[cpIndex+3].y);
                                    x = bp[0];
                                    y = bp[1];
                                break;
                                case 'update phase':
                                    followBezier = false;
                                    currentPhase += 1;
                                break;
                            }
                        } else {
                            cpIndex += 4*bezierSpeedSign;
                            if cpIndex < 0 cpIndex = 0;
                            if bezierSpeedSign == 1 bezierPos = 0 else bezierPos = 1;
                        }
                    }
    
                    bezierPos += bezierSpeedSign*.1;
                }
            }
        }
    }
    
    //////////////////////////
    // run phase
    //////////////////////////

    if runPhase enemy_RunPhase(currentPhase);

} else {
    if waitTime >= 0 {
        waitTime -= 1;
    } else {
        if alarm[0] == -1 {
            alarm[0] = 1;
        }
        //active = true;
    }
}

#event step_begin
if active and use_state_path {
    update_state_path();
    do_state(state);
}

#event collision:oShot
if active and !invul and y > 0 {
    with other {
        HP -= 1;
        if HP <= 0 {
            kill();
            sfx(sndDamageEnemy)
        }
    }
    HP -= other.damage;
    if HP < 0 kill();
}